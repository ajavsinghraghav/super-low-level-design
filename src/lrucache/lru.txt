 # Low_level of LRU Cache;
1-put (key, value)insert a key-value pair into the cache.if the cache is at capacity. remove  the least recently used item
   before inserting the new items.
2-get(key)  Get the value associated with the given key. if the key exists in the cache, move it to the front of the cache
  (mostly recently used) and return its value. if the key does not exist, return -1;
3-cache should have a fixed capacity specified during initialization.
4-The cache should be thread-safe allowing concurrent access from multiple threads.
5-The cache should be efficient in terms of the time complexity for both put and get operations, ideally.O(1)



------------------------------------------------------------------------------------------------------------------------->
classes, Iterfaces and  Enumerations

1-The Node class represent a node in the doubly linked list, containing  the key , value and references to the previous and next nodes
2-The LRU class implements the LRU cache functionality using a combination of the hashmap (cache) and doubly link_list (head tail).
3-The get method retrieve  the value associated with the given key.if the key exist in the cache  .it is moved to head of the linkist(most recently used)
   and its value  is returned . if the key does not exist , null is returned.
4- put method inserts a key _value  pair into the cache . if the key already exist .its value is updated , and the node is moved to the head of
    linked list ). if the key   does not exists , cache is at capacity .the recently used items (at the tail of the linklist) is removed  and new items is inserted  at the head
5-The add to Head , remove Node , move to head and remove tail methods  to manipulates
the doubly linked list
6-The synchronised keyword is used on the get and put method to ensure thread  safety , allowing concurrent access from the multiple
   threads
7- The LRUCacheDemo class demonstrates the usages of the LRU cache by creating  an instance of LRUCache with the capacity of 3 , performing various put and get operations and printing the results





